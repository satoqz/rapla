name: build-push

on:
  push:
    branches: [fast-multi-arch]
  pull_request:
    branches: [main]

jobs:
  build-rust:
    strategy:
      matrix:
        target:
          - arch: x86_64
            extra-packages: ""
          - arch: aarch64
            extra-packages: gcc-aarch64-linux-gnu

    runs-on: ubuntu-latest

    env:
      BIN: rapla-ical-proxy-${{ matrix.target.arch }}-unknown-linux-musl
      RUST_TARGET: ${{ matrix.target.arch }}-unknown-linux-musl
      CARGO_TERM_COLOR: always

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Add Rust toolchain
        run: rustup target add ${{ env.RUST_TARGET }}

      - name: Install OS dependencies
        run: sudo apt-get install -y build-essential ${{ matrix.target.extra-packages }}

      - name: Cache Rust build
        uses: Swatinem/rust-cache@82a92a6e8fbeee089604da2575dc567ae9ddeaab # v2.7.5
        with:
          key: ${{ matrix.target.arch }}

      - name: Build
        run: |
          cargo build --locked --release \
            --target ${{ env.RUST_TARGET }} \
            --config target.${{ env.RUST_TARGET }}.linker=\"${{ matrix.target.arch }}-linux-gnu-gcc\"

      - name: Rename binary
        run: mv target/${{ env.RUST_TARGET }}/release/rapla-ical-proxy ${{ env.BIN }}

      - name: Upload binary
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: ${{ env.BIN }}
          path: ${{ env.BIN }}

  build-push-container:
    needs: build-rust

    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

      - name: Download binaries
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.8.1
        with:
          path: bin
          pattern: rapla-ical-proxy-*
          merge-multiple: true

      - run: ls bin

  # build-push:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #     id-token: write

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

  #     - name: Cache Rust build
  #       uses: Swatinem/rust-cache@82a92a6e8fbeee089604da2575dc567ae9ddeaab # v2.7.5

  #     - name: Add rust targets
  #       run: |
  #         rustup target add x86_64-unknown-linux-musl

  #     - name: Extract container image metadata
  #       uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #       id: meta

  #     - name: Select platforms
  #       run: |
  #         if [[ "${{ github.event_name }}" = "pull_request" ]]; then
  #           echo "platforms=linux/amd64" > "$GITHUB_OUPUT"
  #         else
  #           echo "platforms=linux/amd64,linux/arm64" > "$GITHUB_OUTPUT"
  #         fi
  #       id: platforms

  #     - name: Select tags
  #       run: |
  #         if [[ "${{ github.event_name }}" = "pull_request" ]]; then
  #           echo "tags=${{ steps.meta.outputs.tags }}" > "$GITHUB_OUTPUT"
  #         else
  #           echo "tags=${{ steps.meta.outputs.tags }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" > "$GITHUB_OUTPUT"
  #         fi
  #       id: tags

  #     - name: Log into registry
  #       uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #       if: github.event_name != 'pull_request'

  #     - name: Build and push container image
  #       uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
  #       with:
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.tags.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         platforms: ${{ steps.platforms.outputs.platforms }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #       id: build-push

  #     - name: Install Cosign
  #       uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # v3.7.0
  #       if: github.event_name != 'pull_request'

  #     - name: Sign container image
  #       env:
  #         TAGS: ${{ steps.meta.outputs.tags }}
  #         DIGEST: ${{ steps.build-push.outputs.digest }}
  #       run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
  #       if: github.event_name != 'pull_request'
